parameters:
  - name: releaseNumber
    displayName: Release number
    type: string
    default: null

pool:
  vmImage: 'Ubuntu 16.04'

jobs:
  - job: Build
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.19.0'
        displayName: 'Install Node.js'

      - script: |
          node -v
          npm -v
          npm install --no-progress
          npm run build -- --configuration="production"
          npm run lint
          npm run test-headless-no-sandbox -- --watch=false --progress=false --code-coverage
        displayName: 'Front-End - Build & Tests'

      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          goals: 'package -P build-prod'
        displayName: 'Back-End - Build & Tests'
  - job: Prepare_Release
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne('${{ parameters.releaseNumber }}', 'null'))
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: '$(SSH_GITHUB_KNOWN_HOSTS_ENTRY)'
          sshPublicKey: '$(SSH_GITHUB_SURICATE_PUBLIC_KEY)'
          sshKeySecureFile: 'suricate-cicd'

      - script: |
          node -v
          npm -v
          npm --no-git-tag-version version ${{ parameters.releaseNumber }}
        displayName: 'Update Front-End version'

      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          goals: 'versions:set -DnewVersion=${{ parameters.releaseNumber }}'
        displayName: 'Prepare Back-End for release : Update version, Create tag '
                
      - script: |
          git version
          git config --global url.ssh://git@github.com/.insteadOf https://github.com/
          git config --global user.email "loic.greffier_ext@michelin.com"
          git config --global user.name "Azure Pipelines"
          git switch master
          git status
          git add pom.xml
          git add package.json
          git add package-lock.json
          git commit -m "Update project with new release version ${{ parameters.releaseNumber }}"
          git push origin HEAD
        displayName: 'Push new release version ${{ parameters.releaseNumber }} to GitHub'
